# YOLOv5 ðŸš€ by Ultralytics, GPL-3.0 license
# Hyperparameters for low-augmentation COCO training from scratch
# python train.py --batch 64 --cfg yolov5n6.yaml --weights '' --data coco.yaml --img 640 --epochs 300 --linear
# See tutorials for hyperparameter evolution https://github.com/ultralytics/yolov5#tutorials

lr0: 0.001  # initial learning rate (SGD=1E-2, Adam=1E-3)
lrf: 0.0001  # final OneCycleLR learning rate (lr0 * lrf)
momentum: 0.005  # SGD momentum/Adam beta1
weight_decay: 0.0005  # optimizer weight decay 5e-4
warmup_epochs: 0.0  # warmup epochs (fractions ok)
warmup_momentum: 0.0001  # warmup initial momentum
warmup_bias_lr: 0.00001  # warmup initial bias lr
box: 0.05  # box loss gain
cls: 0.5  # cls loss gain
cls_pw: 1.0  # cls BCELoss positive_weight
obj: 1.0  # obj loss gain (scale with pixels)
obj_pw: 1.0  # obj BCELoss positive_weight
label_smoothing_cls: 0.0  # label smoothing for cls
iou_t: 0.20  # IoU training threshold
anchor_t: 4.0  # anchor-multiple threshold
# anchors: 3  # anchors per output layer (0 to ignore)
fl_gamma: 0.0  # focal loss gamma (efficientDet default gamma=1.5)
hsv_h: 0.0  # image HSV-Hue augmentation (fraction)
hsv_s: 0.0  # image HSV-Saturation augmentation (fraction)
hsv_v: 0.0  # image HSV-Value augmentation (fraction)
degrees: 0.0  # image rotation (+/- deg)
translate: 0.0  # image translation (+/- fraction)
scale: 0.0  # image scale (+/- gain)
shear: 0.0  # image shear (+/- deg)2
perspective: 0.0  # image perspective (+/- fraction), range 0-0.001
flipud: 0.0  # image flip up-down (probability)
fliplr: 0.0  # image flip left-right (probability)
mosaic: 0  # image mosaic (probability) changed from 1.0 to 0.0
mosaic_cls: 0  # image mosaic (probability) changed from 1.0 to 0.0
mixup: 0.0  # image mixup (probability)
copy_paste: 0.0  # segment copy-paste (probability)
cut_top: 0.0 # proba of cutting top of image
range_cut_top: [0.5, 0.65]
cut_bottom: 0.0 # proba of cutting bottom of image
range_cut_bottom: [0.01, 0.1]
cut_sides: 0.0 # proba of cutting sides of image
range_cut_sides: [0.1, 0.2]
mask_top: 0.0 # masks top of image
range_mask_top: [0.35, 0.6]
mask_bottom: 0.0
range_mask_bottom: [0.01, 0.1]
mask_sides: 0.0
range_mask_sides: [0.05, 0.15]
random_crop: 0 # proba of random cropping
range_random_crop: [2, 3]